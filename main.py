import json
import asyncio
import logging
import sys
from random import randint

from dotenv import dotenv_values

from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state
from aiogram.types import (
    Message,
    ReplyKeyboardRemove,
    BotCommand,
    FSInputFile
)

from keyboards import EXAM_TYPE_KEYBOARD, CHECKING_STOP_TEST_KEYBOARD, SOLVE_KEYBOARD


config = dotenv_values(".env")
TOKEN = config["TOKEN"]
form_router = Router()

with open("tests.json", 'r', encoding='utf-8') as file:
    TESTS: dict[str, list[list[dict[str, str]]]] = json.load(file)

HELLO_TEXT = """üëã –ü—Ä–∏–≤–µ—Ç!
–¢—ã –≤ —É–º–Ω–æ–º –±–æ—Ç–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –∏ –û–ì–≠ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.

–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å:
‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã.
‚úÖ –£–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
‚úÖ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.

üöÄ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç ‚Äî –±–æ—Ç –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç!
–ò –ø–æ–º–Ω–∏: –∫–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ ‚Äî —ç—Ç–æ —à–∞–≥ –∫ 100 –±–∞–ª–ª–∞–º.

–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è? –ü–æ–≥–Ω–∞–ª–∏! üéØ
"""


BOT_COMMANDS = [
    BotCommand(command="start", description="Start bot"),
    BotCommand(command="solve", description="Start solving tasks")
]


async def show_results(message: Message, state: FSMContext) -> None:
    text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"

    data = await state.get_data()
    exam_type = data.get("exam_type", "ege")
    variant_idx = data["variant_idx"]
    variant = TESTS[exam_type][variant_idx]

    user_answers = data.get("answers", [])
    right_answers = [task["answer"] for task in variant]

    cnt_right_solutions = 0

    for idx, (user_answer, right_answer) in enumerate(zip(user_answers, right_answers)):
        cnt_right_solutions += user_answer == right_answer
        text += f"{idx + 1}) {"+" if user_answer == right_answer else "-"}\n"

    text += f"\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {cnt_right_solutions}/{len(user_answers)}"
    await message.answer(text, reply_markup=ReplyKeyboardRemove())


async def show_task(message: Message, task: dict[str, str], task_id: int) -> None:
    if "path" in task:
        photo = FSInputFile(task["path"])
        await message.answer_photo(
            photo,
            caption=f"–ó–ê–î–ê–ù–ò–ï ‚Ññ{task_id}\n\n{task['text']}",
            reply_markup=SOLVE_KEYBOARD
        )
    else:
        await message.answer(
            f"–ó–ê–î–ê–ù–ò–ï ‚Ññ{task_id}\n\n{task['text']}",
            reply_markup=SOLVE_KEYBOARD
        )


class Form(StatesGroup):
    choosing_exam = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —ç–∫–∑–∞–º–µ–Ω–∞
    solving_tasks = State()
    stopping_solving = State()


@form_router.message(CommandStart())
async def command_start(message: Message) -> None:
    await message.answer(
        HELLO_TEXT,
        reply_markup=ReplyKeyboardRemove()
    )


@form_router.message(Command("solve"))
async def command_solve(message: Message, state: FSMContext) -> None:
    if await state.get_state() == Form.solving_tasks:
        await message.answer(
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ—à–∞—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Å—Ç–∞—Ä—ã–π.\n"
            "–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ \"–°—Ç–æ–ø\"."
        )
        return

    await state.set_state(Form.choosing_exam)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞:",
        reply_markup=EXAM_TYPE_KEYBOARD
    )


@form_router.message(Form.choosing_exam, F.text.casefold().in_(["–æ–≥—ç", "–µ–≥—ç"]))
async def process_exam_choice(message: Message, state: FSMContext) -> None:
    exam_type = "oge" if message.text.casefold() == "–æ–≥—ç" else "ege"
    await state.update_data(exam_type=exam_type)

    variant_idx = randint(0, len(TESTS[exam_type]) - 1)
    await message.answer(f"–í–ê–†–ò–ê–ù–¢ ‚Ññ{variant_idx + 1}", reply_markup=ReplyKeyboardRemove())

    await state.set_state(Form.solving_tasks)
    await state.update_data(variant_idx=variant_idx, task_idx=0)

    variant = TESTS[exam_type][variant_idx]
    await show_task(message, variant[0], 1)


@form_router.message(Form.choosing_exam)
async def process_unknown_exam_type(message: Message) -> None:
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")


@form_router.message(F.text.casefold() == "—Å—Ç–æ–ø", Form.solving_tasks)
async def process_stop_first(message: Message, state: FSMContext) -> None:
    await state.set_state(Form.stopping_solving)
    await message.answer(
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞?",
        reply_markup=CHECKING_STOP_TEST_KEYBOARD
    )


@form_router.message(F.text.casefold() == "—Å—Ç–æ–ø", Form.stopping_solving)
async def process_stop_final(message: Message, state: FSMContext) -> None:
    await show_results(message, state)
    await state.set_state(None)
    await state.update_data(answers=[], task_idx=0)


@form_router.message(F.text.casefold() == "—Å—Ç–æ–ø", default_state)
async def process_stop_undefined(message: Message) -> None:
    await message.answer("–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –µ–≥–æ –Ω–∞—á–∞—Ç—å.")


@form_router.message(F.text.casefold() == "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", Form.stopping_solving)
async def process_continue_solving(message: Message, state: FSMContext) -> None:
    await message.answer("–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–≤–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=SOLVE_KEYBOARD)
    await state.set_state(Form.solving_tasks)


@form_router.message(Form.solving_tasks)
async def process_answer_task(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    exam_type = data.get("exam_type", "ege")
    answer = message.text
    answers = data.get("answers", []) + [answer]
    task_idx = data["task_idx"] + 1
    variant_idx = data["variant_idx"]
    variant = TESTS[exam_type][variant_idx]

    await state.update_data(answers=answers, task_idx=task_idx)

    if task_idx == len(variant):
        await show_results(message, state)
        await state.set_state(None)
        await state.update_data(answers=[], task_idx=0)
    else:
        next_task = variant[task_idx]
        await show_task(message, next_task, task_idx + 1)

@form_router.message()
async def process_unknown_command(message: Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await bot.set_my_commands(commands=BOT_COMMANDS)

    dp = Dispatcher()
    dp.include_router(form_router)

    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(stream=sys.stdout)
    asyncio.run(main())
